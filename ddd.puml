@startuml create-transfers-flow.png
participant BankTransferController
participant CreateBankTransferCommand
participant BankTransfer
participant BankTransferCreatedEvent
participant BankTransferManagementSaga
participant DebitSourceBankAccountCommand
participant BankAccountCommandHandler
participant BankAccount
participant SourceBankAccountDebitedEvent
participant CreditDestinationBankAccountCommand
participant DestinationBankAccountCreditedEvent
participant MarkBankTransferCompletedCommand
participant BankTransferCompletedEvent
participant MoneyAddedEvent
participant MoneySubtractedEvent
participant SourceBankAccountDebitRejectedEvent
participant MarkBankTransferFailedCommand
participant BankTransferFailedEvent

BankTransferController -> CreateBankTransferCommand: create
CreateBankTransferCommand --> BankTransfer: <init>
BankTransfer -> BankTransfer: create
BankTransfer -> BankTransferCreatedEvent: <init>
BankTransferCreatedEvent --> BankTransfer: on
BankTransferCreatedEvent --> BankTransferManagementSaga: on
BankTransferManagementSaga -> DebitSourceBankAccountCommand: create
DebitSourceBankAccountCommand --> BankAccountCommandHandler: handle
BankAccountCommandHandler -> BankAccount: create
BankAccount -> SourceBankAccountDebitedEvent: <init>
SourceBankAccountDebitedEvent --> BankTransferManagementSaga: on
BankTransferManagementSaga -> CreditDestinationBankAccountCommand: create
CreditDestinationBankAccountCommand --> BankAccountCommandHandler: handle
BankAccount -> DestinationBankAccountCreditedEvent: <init>
DestinationBankAccountCreditedEvent --> BankTransferManagementSaga: on
BankTransferManagementSaga -> MarkBankTransferCompletedCommand: create
MarkBankTransferCompletedCommand --> BankTransfer: handle
BankTransfer -> BankTransferCompletedEvent: <init>
BankTransferCompletedEvent --> BankTransfer: on
BankTransferCompletedEvent --> BankTransferEventListener: on
BankAccount -> MoneyAddedEvent: <init>
MoneyAddedEvent --> BankAccount: on
MoneyAddedEvent --> BankAccountEventListener: on
BankAccount -> MoneySubtractedEvent: <init>
MoneySubtractedEvent --> BankAccount: on
MoneySubtractedEvent --> BankAccountEventListener: on
BankAccount -> SourceBankAccountDebitRejectedEvent: <init>
SourceBankAccountDebitRejectedEvent --> BankTransferManagementSaga: on
BankTransferManagementSaga -> MarkBankTransferFailedCommand: create
MarkBankTransferFailedCommand --> BankTransfer: handle
BankTransfer -> BankTransferFailedEvent: <init>
BankTransferFailedEvent --> BankTransfer: on
BankTransferFailedEvent --> BankTransferEventListener: on
BankTransferCreatedEvent --> BankTransferEventListener: on
@enduml